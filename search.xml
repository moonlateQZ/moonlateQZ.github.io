<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>洛谷P1342 请柬题解</title>
    <url>/project/2020/03/20/%E6%B4%9B%E8%B0%B7P1342-%E8%AF%B7%E6%9F%AC%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1342">我是题目！！！</a></p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>现在有一张$n$个点，$m$条带权单向边的图。现在有$n-1$个人要从节点$1$出发，分别去$2~n$这些节点（每个人只去一个），然后这些人要从他们所处的节点回到节点$1$，求最小花费。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>从节点$1$去其他节点的最短路很好求，但是如果从其他节点回到节点$1$就不那么好办了，总不可能所有点都跑一变$spfa$或者$dij$吧。</p>
<p>于是说我们现在就需要建一张反图，然后跑一遍$spfa$，我们就可以求出所有点到节点$1$的最短路（为什么？自己想一想，手动画一下也可以帮助理解），于是说我们只需要跑两遍$spfa$或者$dij$即可。两遍都是从$1$开始跑，再把两个$dis$数组的所有值加在一起就是答案了。</p>
<h3 id="代码部分："><a href="#代码部分：" class="headerlink" title="代码部分："></a>代码部分：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> moonlateQZ &#123;<span class="comment">//这个是码风问题，写在main函数里面也是可以的</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> uF(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> p_b push_back</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> m_p make_pair</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">	<span class="type">const</span> ll INF=<span class="number">1e9</span>+<span class="number">7</span>,LINF=<span class="number">1e15</span>+<span class="number">7</span>,N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	<span class="type">int</span> u,v,w;</span><br><span class="line">	<span class="type">int</span> dis1[N],dis2[N];</span><br><span class="line">    <span class="type">bool</span> in[N];</span><br><span class="line">    ll ans;</span><br><span class="line">	vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; mp1[N],mp2[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> dis[],vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; *mp)</span> </span>&#123;<span class="comment">//这个地方的dis[]是相当于传了一个一维数组dis</span></span><br><span class="line">    <span class="comment">//那么后面的vector&lt;pair&lt;int,int&gt; &gt; *mp则是传了一个二维vector，像这样的：vector&lt;pair&lt;int,int&gt;&gt; mp[10005]，这样的就可以传进来</span></span><br><span class="line">    <span class="comment">//这么写是为了方便，因为正反两张图都要跑，除非你愿意写两遍spfa</span></span><br><span class="line">        <span class="built_in">F</span>(i,<span class="number">1</span>,n) dis[i]=INF;<span class="comment">//不能使用memset，因为传进来的dis是位置大小的，只能手动赋值</span></span><br><span class="line">        <span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="built_in">sizeof</span>(in));<span class="comment">//接下来就是spfa的模板了</span></span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        dis[st]=<span class="number">0</span>;</span><br><span class="line">        in[st]=<span class="literal">true</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(st);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            in[x]=<span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">F</span>(i,<span class="number">0</span>,mp[x].<span class="built_in">size</span>()<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> u=mp[x][i].first,w=mp[x][i].second;</span><br><span class="line">                <span class="keyword">if</span>(dis[u]&gt;dis[x]+w) &#123;</span><br><span class="line">                    dis[u]=dis[x]+w;</span><br><span class="line">                    <span class="keyword">if</span>(!in[u]) &#123;</span><br><span class="line">                        in[u]=<span class="literal">true</span>;</span><br><span class="line">                        q.<span class="built_in">push</span>(u);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<span class="comment">//输入</span></span><br><span class="line">		<span class="built_in">F</span>(i,<span class="number">1</span>,m) &#123;<span class="comment">//循环，在上面define过了，方便书写</span></span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            mp1[u].<span class="built_in">p_b</span>(<span class="built_in">m_p</span>(v,w));<span class="comment">//建一张正图</span></span><br><span class="line">            mp2[v].<span class="built_in">p_b</span>(<span class="built_in">m_p</span>(u,w));<span class="comment">//建一张反图</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">spfa</span>(<span class="number">1</span>,dis1,mp1);<span class="comment">//正着跑一遍</span></span><br><span class="line">        <span class="built_in">spfa</span>(<span class="number">1</span>,dis2,mp2);<span class="comment">//反着跑一遍</span></span><br><span class="line">        <span class="built_in">F</span>(i,<span class="number">1</span>,n) ans+=(dis1[i]+dis2[i]);<span class="comment">//求出答案</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);<span class="comment">//输出</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">void</span> _main() &#123;</span><br><span class="line">		<span class="built_in">input</span>();</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	moonlateQZ::_main();<span class="comment">//这个其实写在main函数里面也是没有关系的啦~，个人习惯而已……</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//良好习惯不要忘记QωQ</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最短路</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1462 通往奥格瑞玛的道路 题解</title>
    <url>/project/2020/03/21/%E6%B4%9B%E8%B0%B7P1462-%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1462">题目这里！</a></p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>现在有一张有$n$个点，$m$条无向边的图，一个人从节点$1$要到节点$n$，现在他有$b$这么多血，每走过一条路都会减少那条路边权那么多的血量，血量小于$0$时即为死亡。然后每个经过每个节点都会收取一些过路费$f_i$，让你求出在那个人可以<strong>到达</strong>节点$n$的情况下所走的路径上过路费最大的点所收的费最小是多少。</p>
<h3 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h3><p>看见了<strong>最大值最小</strong>之类的字眼，我们就立马反应过来这是二分<del>（居然是二分答案！我不会的东西……)</del></p>
<p>那么我们的二分思路是什么呢？<del>(我怎么知道，这么恶心！)</del>，我们二分的$mid$是说我们把所有花费排序之后的下标。然后对于每一个$mid$跑一遍$spfa$进行判断不走花费大于$mid$的点的情况下血量够不够用，如果行，那么$r&#x3D;mid-1$即缩小我们的$mid$，使得最大值最小，如果不行，$l&#x3D;mid+1$，将我们的$mid$扩大（毕竟命比钱重要（滑稽））。最后再输出$f_l$（$l$和$r$枚举的是花费数组的下标哦！！）就是我们的答案。</p>
<p>温馨提示:不开$long \ long$见祖宗！！！</p>
<h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> moonlateQZ &#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> F(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> uF(i,r,l) for(int i=r;i&gt;=l;i--)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> p_b push_back</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> m_p make_pair</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">	<span class="type">const</span> ll INF=<span class="number">1e9</span>+<span class="number">7</span>,LINF=<span class="number">1e15</span>+<span class="number">7</span>,N=<span class="number">10005</span>;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	<span class="type">int</span> u,v;</span><br><span class="line">	<span class="type">bool</span> in[N];</span><br><span class="line">	ll b,w,cost[N],pay[N],dis[N];</span><br><span class="line">	vector&lt;pair&lt;<span class="type">int</span>,ll&gt; &gt; mp[N];</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(ll num)</span> </span>&#123;<span class="comment">//spfa部分，其实也就是一个模板，加了二分的判断而已</span></span><br><span class="line">		<span class="comment">//其实就是二分的check，只不过check变成了求最短路而已。</span></span><br><span class="line">		queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">		<span class="built_in">F</span>(i,<span class="number">1</span>,n) dis[i]=LINF;</span><br><span class="line">		<span class="built_in">memset</span>(in,<span class="literal">false</span>,<span class="built_in">sizeof</span>(in));</span><br><span class="line">		q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">		dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		in[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">			in[x]=<span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mp[x].<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">				<span class="type">int</span> u=mp[x][i].first;ll w=mp[x][i].second;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]&gt;dis[x]+w&amp;&amp;cost[u]&lt;=num) &#123;</span><br><span class="line">					dis[u]=dis[x]+w;</span><br><span class="line">					<span class="keyword">if</span>(!in[u]) &#123;</span><br><span class="line">						q.<span class="built_in">push</span>(u);</span><br><span class="line">						in[u]=<span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(dis[n]&gt;b) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;n,&amp;m,&amp;b);</span><br><span class="line">		<span class="built_in">F</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;cost[i]);</span><br><span class="line">			pay[i]=cost[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(pay+<span class="number">1</span>,pay+<span class="number">1</span>+n);<span class="comment">//二分是建立在排序的基础之上的鸭</span></span><br><span class="line">		<span class="built_in">F</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">			mp[u].<span class="built_in">p_b</span>(<span class="built_in">m_p</span>(v,w));</span><br><span class="line">			mp[v].<span class="built_in">p_b</span>(<span class="built_in">m_p</span>(u,w));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">spfa</span>(LINF)) &#123;<span class="comment">//判断能不能到达，取一个极大值进行判断。</span></span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;AFK&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		ll l=<span class="number">1</span>,r=n,mid;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">			mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">spfa</span>(pay[mid])) l=mid+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,pay[l]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">void</span> _main() &#123;</span><br><span class="line">		<span class="built_in">input</span>();</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	moonlateQZ::_main();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>最短路</tag>
        <tag>二分</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P4053[JSOI2007]建筑抢修</title>
    <url>/project/2020/07/23/%E6%B4%9B%E8%B0%B7P4053-JSOI2007-%E5%BB%BA%E7%AD%91%E6%8A%A2%E4%BF%AE/</url>
    <content><![CDATA[<p>吐槽：<del>你确定这是蓝题？？？</del></p>
<p><a href="https://www.luogu.com.cn/problem/P4053">题目链接</a></p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>现在有$N$个坏掉的建筑和一个建筑工人，已知修理第$i$个建筑的时间是$T1_i$秒，但是如果在$T2_i$秒前没有修理完成，这个建筑就会$boom…$（刚好在$T2_i$秒修好不会炸掉）。然后建筑工人前往每个建筑的时间忽略不计，那么请问，最多能修理多少个建筑？</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个$N$，接下来$N$行，每行两个数$T1$,$T2$,意义如上述。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个数，表示最多能修理的建筑。</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">100 200</span><br><span class="line">200 1300</span><br><span class="line">1000 1250</span><br><span class="line">2000 3200</span><br></pre></td></tr></table></figure>

<h4 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h4><p><code>3</code></p>
<h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>我们按$1-3-2$或者$1-2-4$的方式去修即珂。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>啊这。。您别告诉我您没看出来这是裸的贪心……</p>
<p>首先，我们按每个建筑爆炸的时间排序，先爆炸的先修。然后我们开一个变量来记录当前已经用了多少的时间去修理（同时就是一条时间轴）。那么显然，有些建筑会在我们修理完当前建筑后就爆炸了，那么当这个爆炸的建筑所需要修理的时间比我们修理过的建筑中最大的修理时间要小，那么我们就把修理过的消耗最大的修理时间的建筑给__掉，然后空出来的时间修理这个建筑。这个过程用一个优先队列维护即珂~~</p>
<p><del>我相信您一定是一头雾水，</del>但是看代码您一定懂了！</p>
<h3 id="ACcode"><a href="#ACcode" class="headerlink" title="ACcode"></a>ACcode</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F(i,l,r) for(register int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p_b push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_p make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">150005</span>;</span><br><span class="line"><span class="type">int</span> n,use,ans;<span class="comment">//use表示当前修理总共用的时间，ans表示最多修多少个建筑</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> t1,t2;<span class="comment">//开个结构体存时间</span></span><br><span class="line">&#125;t[N];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;<span class="comment">//定义优先队列来存放我们当前所做过的任务</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.t2&lt;y.t2;<span class="comment">//按爆炸时间升序排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">F</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t[i].t1,&amp;t[i].t2);<span class="comment">//输入</span></span><br><span class="line">	<span class="built_in">sort</span>(t+<span class="number">1</span>,t+<span class="number">1</span>+n,cmp);<span class="comment">//排序</span></span><br><span class="line">	<span class="built_in">F</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">		<span class="keyword">if</span>(use+t[i].t1&gt;t[i].t2) &#123;<span class="comment">//如果我们当前的任务修理不了了（没修理完或者没修理就会爆炸的那种</span></span><br><span class="line">			<span class="keyword">if</span>(t[i].t1&lt;q.<span class="built_in">top</span>())&#123;<span class="comment">//如果当前的任务耗费的时间比我们修过的所有任务中耗费时间最大的任务要小，那么我们就选择不去修那个耗时大的，取而代之选当前的</span></span><br><span class="line">				use-=q.<span class="built_in">top</span>();<span class="comment">//减去最大的耗时</span></span><br><span class="line">				q.<span class="built_in">pop</span>();<span class="comment">//弹出</span></span><br><span class="line">				q.<span class="built_in">push</span>(t[i].t1);<span class="comment">//将当前任务推入队列</span></span><br><span class="line">				use+=t[i].t1;<span class="comment">//加上当前耗时</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//如果能修就修呗……</span></span><br><span class="line">			q.<span class="built_in">push</span>(t[i].t1);</span><br><span class="line">			use+=t[i].t1;</span><br><span class="line">			ans++;<span class="comment">//这里一定要加，上面那个if不加的原因是：我们弹出了一个有推入了一个，修理个数还是不变</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);<span class="comment">//输出</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><del>不得不说，水极了（首尾呼应（滑稽））</del></p>
]]></content>
      <tags>
        <tag>Coding</tag>
        <tag>反悔贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈spfa</title>
    <url>/project/2020/03/16/%E6%B5%85%E8%B0%88spfa/</url>
    <content><![CDATA[<h2 id="算法简简简介"><a href="#算法简简简介" class="headerlink" title="算法简简简介"></a><del>算法简简简介</del></h2><p>$spfa$，即$Shortest \ Path \ Faster \ Algorithm$，是$Bellman-Ford$的一个优化版本 <del>（为什么Dijkstra优化了还是叫Dijkstra，你个spfa就可以改名啊！）</del></p>
<h2 id="算法讲解"><a href="#算法讲解" class="headerlink" title="算法讲解"></a>算法讲解</h2><p>回归正题，$spfa$主要是用一个$dis$数组来存储源点到每个节点的最短路，然后先将$dis$数组初始化为一个极大值，使得后面在松弛（其实就是求最短路啦）的时候能够被更新。我们把所有节点推到一个队列里面，然后每次取出队首进行松弛，如果说更新后的节点不在队列里面的话，就把它给推进队列里面，当队列为空时，最短路也就更新出来的QωQ。复杂度为 $\Theta(KN)$ ($k$是一个常数，表示每个点进队的次数，随机图的话，$k$就在$2$左右。但是如果出题人<del>毒瘤</del>故意卡的话，$k$就会退化成边的条数)。</p>
<h3 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h3><p><img src="https://s1.ax1x.com/2020/03/17/8NR5l9.jpg" alt="a"><br><strong>我们用这样一张无向图来作为例子。以节点1为起点，节点5为终点。</strong><br><img src="https://s1.ax1x.com/2020/03/17/8NfEE6.jpg" alt="b"><br><strong>首先，我们将节点1推入队列之中，然后将dis[1]设为0。</strong><br><img src="https://s1.ax1x.com/2020/03/17/8NICi6.jpg" alt="c"><br><strong>其次，我们将1弹出队列，并将与其连着的2，3推入队列中，并将dis[2]更新为dis[1]+5&#x3D;5，dis[3]更新为dis[1]+3&#x3D;3。</strong><br><img src="https://s1.ax1x.com/2020/03/17/8Nox4x.jpg" alt="d"><br><strong>接着，我们将队首的2弹出，然后将dis[4]更新为dis[2]+2&#x3D;7，将dis[5]更新为dis[2]+1&#x3D;6，并将这两个点推入队列。</strong><br><img src="https://s1.ax1x.com/2020/03/17/8NvNGj.jpg" alt="e"><br><strong>再接着，我们将队首的3弹出，然后发现dis[3]+5&gt;dis[4]的，所以我们不能更新dis[4]，但是我们发现dis[5]可以更新，于是我们就把dis[5]更新为dis[3]+1&#x3D;4。但是因为4处于队列中，我们就不再push进去。</strong><br><img src="https://s1.ax1x.com/2020/03/17/8NzBUU.jpg" alt="f"><br><strong>我们把队首的4弹出，发现什么也更新不了，于是啥也不做。</strong><br><img src="https://s1.ax1x.com/2020/03/17/8NL9nU.jpg" alt="g"><br><strong>然后我们再次发现弹出5后也是啥也做不了……，于是最短路就求完啦！！！</strong></p>
<h3 id="空谈误国"><a href="#空谈误国" class="headerlink" title="空谈误国"></a><del>空谈误国</del></h3><p><a href="https://www.luogu.com.cn/problem/P3371">来做一道spfa模板题吧！</a><br>$$ACcode$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p_b push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_p make_pair</span></span><br><span class="line"><span class="comment">//方便书写</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">2147483647</span>,N=<span class="number">500005</span>;</span><br><span class="line"><span class="type">int</span> n,m,st;<span class="comment">//分别表示 点数 边数 起点</span></span><br><span class="line"><span class="type">int</span> u,v,w;<span class="comment">//表示从点u-&gt;v的权值为w</span></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; mp[N];<span class="comment">//此处使用邻接表来存图，其实这个随意，看个人习惯</span></span><br><span class="line"><span class="comment">//因为还要存边权，所以用pair（struct也是可以的）</span></span><br><span class="line"><span class="type">bool</span> in[N];<span class="comment">//判断一个点在不在队列中</span></span><br><span class="line"><span class="type">int</span> dis[N];<span class="comment">//用来存储源点到所有点的最短距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;<span class="comment">//函数开始，传参传的是源点</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;<span class="comment">//定义队列（你也可以手写）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=INF;<span class="comment">//将dis数组更新为极大值，既然本题中要求要2^31 -1，那么INF就特事特办</span></span><br><span class="line">    <span class="built_in">memset</span>(in,<span class="literal">false</span>,<span class="built_in">sizeof</span>(in));<span class="comment">//一定要初始化（除非你把数组定义在函数里面）</span></span><br><span class="line">    q.<span class="built_in">push</span>(st);<span class="comment">//将源点推进队列中</span></span><br><span class="line">    in[st]=<span class="literal">true</span>;<span class="comment">//将源点标记为在队列中</span></span><br><span class="line">    dis[st]=<span class="number">0</span>;<span class="comment">//源点到它自己的距离当然是0啦~</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;<span class="comment">//只要队列非空</span></span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();<span class="comment">//取出队首&amp;弹出</span></span><br><span class="line">        in[x]=<span class="literal">false</span>;<span class="comment">//把弹出的元素标记为不在队列里面</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mp[x].<span class="built_in">size</span>();i++) &#123;<span class="comment">//遍历每一个跟x有边的节点</span></span><br><span class="line">            <span class="type">int</span> to=mp[x][i].first;<span class="comment">//我们要更新的节点</span></span><br><span class="line">            <span class="type">int</span> w=mp[x][i].second;<span class="comment">//边权</span></span><br><span class="line">            <span class="keyword">if</span>(dis[to]&gt;dis[x]+w) &#123;<span class="comment">//如果说可以更新的话（我们要去的点离源点的长度比现在去这个点的长度达，我们就更新）</span></span><br><span class="line">                dis[to]=dis[x]+w;<span class="comment">//松弛</span></span><br><span class="line">                <span class="keyword">if</span>(!in[to]) &#123;<span class="comment">//如果说 更新后 的节点没有进队</span></span><br><span class="line">                    q.<span class="built_in">push</span>(to);<span class="comment">//那么就把它推进去更新其他的点</span></span><br><span class="line">                    in[to]=<span class="literal">true</span>;<span class="comment">//把这个点标记为在队列中</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;st);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        mp[u].<span class="built_in">p_b</span>(<span class="built_in">m_p</span>(v,w));</span><br><span class="line">        <span class="comment">//mp[v].p_b(m_p(u,w))去掉注释就是双向边（无向边）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>(st);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关于-spfa-の梗"><a href="#关于-spfa-の梗" class="headerlink" title="关于$spfa$の梗"></a>关于$spfa$の梗</h2><p>$spfa$一直是受人欢迎的最短路算法，直到那个$NOI \ 2018$黑暗的$Day1$:<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/j2vhyqwj.png"></p>
<p>于是网上便广大流传：”我$spfa$了”之类的话，所以说笔者在此处劝诫大家：在不是判负环或者单纯最短路的时候，千万不要用$spfa$，因为你永远也不会知道你遇见的出题人有没有那么<del>毒瘤</del>爱卡算法。（老老实实写$Dijkstra$吧！）</p>
]]></content>
      <tags>
        <tag>Coding</tag>
        <tag>spfa</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>CF286C Main Sequence</title>
    <url>/project/2020/07/23/CF286C-Main-Sequence/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF286C">题目链接</a></p>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>定义一个“整数括号序列”：每个正整数都要有一个与之匹配的相反数，把正整数视为左括号，负整数视为右括号。</p>
<p>设$lsum_i$,$rsum_i$为位置$1$~$i$的左、右括号数量，则这个序列要求每个左（右）括号都有对应的右（左）括号。</p>
<p>现在给你$N$个<strong>正</strong>整数，给定其中$M$个位置，对其取负，问能否将另一些位置的正整数也取负，使得这个“整数括号序列”合法。如果可以，输出这个修改后的序列。</p>
<p>$N\le 10^6,M\le N$</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个$N$，接下来一行$N$个<strong>正整数</strong>，下面一行一个$M$，然后$M$个数$q_i$紧接其后，表示将$a_{q_i}$变成原来的数的相反数。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果不能把更改后的数组变得合法，就输出<code>NO</code>，否则输出<code>YES</code>，并且输出更改后的合法序列。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们从右往左贪心（因为我们要根据右括号去匹配左括号），然后如果当现在的$a_i&lt; 0$我们就把它推到当前的栈里，如果遇到了一个正整数，那就看看这个数跟栈顶匹不匹配，匹配就pop掉栈顶，否则我们就把当前这个正整数变为它的相反数，然后也推进栈里面，试着跟后面的正整数匹配。</p>
<p>如果栈不空，那么就匹配不了，就输出<code>NO</code>,否则输出<code>YES</code>，然后再把我们刚刚的$a$数组输出即珂。</p>
<h3 id="ACcode"><a href="#ACcode" class="headerlink" title="$ACcode$"></a>$ACcode$</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F(i,l,r) for(register int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p_b push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_p make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000005</span>],q;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; S;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">F</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">	<span class="built_in">F</span>(i,<span class="number">1</span>,m) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q),a[q]=-a[q];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;=<span class="number">0</span>&amp;&amp;!S.<span class="built_in">empty</span>()&amp;&amp;S.<span class="built_in">top</span>()==-a[i]) S.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">else</span> S.<span class="built_in">push</span>(a[i]*=a[i]&gt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!S.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>),<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">	<span class="built_in">F</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Coding</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>看番记录</title>
    <url>/project/2022/04/11/%E7%9C%8B%E7%95%AA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>不知不觉中就沉迷看番了<del>，一定要成为阅番无数的人啊！</del></p>
<p>但是，看了这么多番，永远喜欢的，还是 <strong>春日野穹</strong>！！！</p>
<span id="more"></span>

<p>2022-03-21~2022-03-23 缘之空&amp;悠之空</p>
<ul>
<li>一点点感想：悠之空剧情真的好甜好甜，到处都是狗粮！（穹妹线）但是看完了总是很惆怅，或许是三轮学bgm做得好？？<del>（雾）</del></li>
</ul>
<p>2022-04-01~2022-04-04 日在校园</p>
<ul>
<li>一点点感想：诚哥真的渣不说，但是世界也很可怜啊，挺同情她的，这个人设也不应当仅是负面的吧，活泼和调皮，倒也挺可爱的。</li>
</ul>
<p>2022-04-05~2022-04-08 某科学的超电磁炮</p>
<p>2022-04-09~2022-04-?? 某科学的超电磁炮S</p>
]]></content>
      <tags>
        <tag>Life</tag>
        <tag>Anime</tag>
      </tags>
  </entry>
</search>
